plugins {
    id "com.github.hierynomus.license" version "0.13.1"
}

apply plugin: "com.android.application"
apply plugin: "android-apt"
apply plugin: "checkstyle"

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        def versionMajor = 1
        def versionMinor = 0
        def versionPatch = 0

        applicationId "org.hawkular.client.android"

        versionName buildVersionName(versionMajor, versionMinor, versionPatch)
        versionCode buildVersionCode(versionMajor, versionMinor, versionPatch)

        minSdkVersion 16
        targetSdkVersion rootProject.ext.targetSdkVersion

        vectorDrawables.useSupportLibrary = true

        resConfigs "en", "de"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        def serverProperties = readProperties("server.properties")

        buildConfigField "String", "UPS_URL", formatStringField(readProperty(serverProperties, "ups.url"))
        buildConfigField "String", "UPS_VARIANT", formatStringField(readProperty(serverProperties, "ups.variant"))
        buildConfigField "String", "UPS_SECRET", formatStringField(readProperty(serverProperties, "ups.secret"))
        buildConfigField "String", "FCM_SENDER", formatStringField(readProperty(serverProperties, "fcm.sender"))
        buildConfigField "String", "FCM_APPLICATION_ID", formatStringField(readProperty(serverProperties, "fcm" +
                ".application"))
        buildConfigField "String", "FCM_API_KEY", formatStringField(readProperty(serverProperties, "fcm.api"))
        buildConfigField "String", "FCM_DATABASE_URL", formatStringField(readProperty(serverProperties, "fcm.database"))
        buildConfigField "String", "FCM_STORAGE_BUCKET", formatStringField(readProperty(serverProperties, "fcm.bucket"))

        signingConfigs {
            release {
                if (file("signing.properties").exists()) {
                    def signingProperties = readProperties("signing.properties")

                    storeFile file(readProperty(signingProperties, "keystore.file"))
                    storePassword readProperty(signingProperties, "keystore.password")
                    keyAlias readProperty(signingProperties, "key.alias")
                    keyPassword readProperty(signingProperties, "key.password")
                }
            }
        }

        buildTypes {
            debug {
                minifyEnabled false
                def files = readProguardFiles()
                files.each { file ->
                    proguardFiles file
                }

            }

            release {
                signingConfig signingConfigs.release

                minifyEnabled false
                shrinkResources true
                def files = readProguardFiles()
                files.each { file ->
                    proguardFiles file
                }
            }
        }
    }
}

def buildVersionName(versionMajor, versionMinor, versionPatch) {
    return "${versionMajor}.${versionMinor}.${versionPatch}"
}

def buildVersionCode(versionMajor, versionMinor, versionPatch) {
    return versionMajor * 10 ** 2 + versionMinor * 10 ** 1 + versionPatch * 10 ** 0
}

def readProperties(propertiesFileName) {
    def properties = new Properties()
    def propertiesFile = file(propertiesFileName)

    if (propertiesFile.exists()) {
        properties.load(propertiesFile.newInputStream())
    }

    return properties
}

def readProperty(properties, propertyName) {
    def property = properties[propertyName]

    if (property) {
        return property
    } else {
        return ""
    }
}

def formatStringField(field) {
    return "\"${field}\""
}

def readProguardFiles() {
    def proguardFiles = []

    proguardFiles << android.getDefaultProguardFile("proguard-android.txt")

    file("proguard").eachFile { proguardFile ->
        proguardFiles << proguardFile
    }

    return proguardFiles
}

tasks.withType(Checkstyle) {
    configFile = rootProject.file('misc/checkstyle.xml')

    source 'src'
    include '**/*.java'
    include '**/*.json'
    include '**/*.xml'
    exclude '**/gen/**'

    classpath = files()

}

license {
    header rootProject.file('misc/HEADER.txt')
    strictCheck true
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    exclude "**/build/"
    exclude "**/*.gradle/"
    exclude "gradle/"
    exclude "gradlew"
    exclude "gradlew.bat"
    exclude "**/*.pro"
    exclude "**/*.properties"
    exclude "**/misc/*"
    exclude "**/*.png"
}

dependencies {

    def supportLibraryVersion = '25.2.0'

    wearApp project(':wear')

    apt "com.jakewharton:butterknife-compiler:8.5.1"

    provided "frankiesardo:icepick-processor:3.1.0"


    compile "com.android.support:appcompat-v7:${supportLibraryVersion}"
    compile "com.android.support:design:${supportLibraryVersion}"
    compile "com.android.support:preference-v7:${supportLibraryVersion}"
    compile "com.android.support:support-annotations:${supportLibraryVersion}"
    compile "com.android.support:support-v4:${supportLibraryVersion}"
    compile 'com.github.bmelnychuk:atv:1.2.8'
    compile 'com.github.johnkil.print:print:1.2.2'
    compile "com.github.lecho:hellocharts-library:1.5.8@aar"
    compile "com.jakewharton:butterknife:8.5.1"
    compile "com.jakewharton.timber:timber:3.1.0"
    compile "com.squareup.okhttp:okhttp:2.7.5"
    compile "com.squareup.okhttp:okhttp-ws:2.7.5"
    compile "com.squareup.retrofit2:retrofit:2.2.0"
    compile 'com.squareup.retrofit2:converter-moshi:2.2.0'
    compile "info.metadude.android:typed-preferences:2.0.0"
    compile "org.jboss.aerogear:aerogear-android-authz:3.0.0"
    compile "org.jboss.aerogear:aerogear-android-pipe:3.1.0"
    compile "org.jboss.aerogear:aerogear-android-push:4.0.2"
    compile "com.squareup:otto:1.3.8"
    compile "frankiesardo:icepick:3.1.0"
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5.1'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'
    compile 'com.google.code.gson:gson:2.6.1'

    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'
    testCompile 'junit:junit:4.12'
    androidTestCompile "com.android.support:support-annotations:${supportLibraryVersion}"
    androidTestCompile "com.android.support.test:rules:0.5"
    androidTestCompile "com.android.support.test:runner:0.5"
    androidTestCompile "com.squareup.assertj:assertj-android:1.1.0"

}